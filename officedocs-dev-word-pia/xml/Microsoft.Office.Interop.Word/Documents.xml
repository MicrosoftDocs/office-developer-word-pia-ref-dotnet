<Type Name="Documents" FullName="Microsoft.Office.Interop.Word.Documents">
  <TypeSignature Language="C#" Value="public interface Documents : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract Documents implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Word.Documents" />
  <TypeSignature Language="VB.NET" Value="Public Interface Documents&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class Documents : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type Documents = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0002096C-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4288)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A collection of all the <see cref="T:Microsoft.Office.Interop.Word.Document" /> objects that are currently open in Word.</summary>
    <remarks>
      <para>Use the <see cref="P:Microsoft.Office.Interop.Word._Application.Documents" /> property to return the <b>Documents</b> collection.</para>
      <para>Use the <see cref="M:Microsoft.Office.Interop.Word.Documents.Add(System.Object@,System.Object@,System.Object@,System.Object@)" /> method to create a new empty document and add it to the <b>Documents</b> collection.</para>
      <para>Use the <b>Open</b> method to open a file.</para>
      <para>Use <b>Documents</b>(<paramref name="index" />), where <paramref name="index" /> is the document name or index number to return a single <b>Document</b> object.</para>
      <para>The index number represents the position of the document in the <b>Documents</b> collection.</para>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Document Add (ref object Template, ref object NewTemplate, ref object DocumentType, ref object Visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Word.Document Add([in]object&amp; Template, [in]object&amp; NewTemplate, [in]object&amp; DocumentType, [in]object&amp; Visible) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.Add(System.Object@,System.Object@,System.Object@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (Optional ByRef Template As Object, Optional ByRef NewTemplate As Object, Optional ByRef DocumentType As Object, Optional ByRef Visible As Object) As Document" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj * obj * obj -&gt; Microsoft.Office.Interop.Word.Document" Usage="documents.Add (Template, NewTemplate, DocumentType, Visible)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(14)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Document</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Template" Type="System.Object" RefType="ref" />
        <Parameter Name="NewTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="DocumentType" Type="System.Object" RefType="ref" />
        <Parameter Name="Visible" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Template">Optional <b>Object</b>. The name of the template to be used for the new document. If this argument is omitted, the Normal template is used.</param>
        <param name="NewTemplate">Optional <b>Object</b>. <b>True</b> to open the document as a template. The default value is <b>False</b>.</param>
        <param name="DocumentType">Optional <b>Object</b>. Can be one of the following <see cref="T:Microsoft.Office.Interop.Word.WdNewDocumentType" /> constants: <b>wdNewBlankDocument</b>, <b>wdNewEmailMessage</b>, <b>wdNewFrameset</b>, or <b>wdNewWebPage</b>. The default constant is <b>wdNewBlankDocument</b>.</param>
        <param name="Visible">Optional <b>Object</b>. <b>True</b> to open the document in a visible window. If this value is <b>False</b>, Microsoft Word opens the document but sets the <see cref="P:Microsoft.Office.Interop.Word.Window.Visible" /> property of the document window to <b>False</b>. The default value is <b>True</b>.</param>
        <summary>Returns a <see cref="T:Microsoft.Office.Interop.Word.Document" /> object that represents a new, empty document added to the collection of open documents.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBlogDocument">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Document AddBlogDocument (string ProviderID, string PostURL, string BlogName, string PostID = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Word.Document AddBlogDocument([in]string ProviderID, [in]string PostURL, [in]string BlogName, [in]string PostID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.AddBlogDocument(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddBlogDocument (ProviderID As String, PostURL As String, BlogName As String, Optional PostID As String = &quot;&quot;) As Document" />
      <MemberSignature Language="F#" Value="abstract member AddBlogDocument : string * string * string * string -&gt; Microsoft.Office.Interop.Word.Document" Usage="documents.AddBlogDocument (ProviderID, PostURL, BlogName, PostID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(21)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Document</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProviderID" Type="System.String" />
        <Parameter Name="PostURL" Type="System.String" />
        <Parameter Name="BlogName" Type="System.String" />
        <Parameter Name="PostID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProviderID">A GUID that is the unique value a provider uses when they register themselves with Word.</param>
        <param name="PostURL">The URL that is used to add posts to the blog.</param>
        <param name="BlogName">A display name for the blog that will be used in Word.</param>
        <param name="PostID">The ID for an existing post with which to populate the document created by using the <b>AddBlogDocument</b> method.</param>
        <summary>Returns a  object that represents a new blog document that Microsoft Office Word publishes to the account described by the first three parameters.</summary>
        <returns>
          <see cref="T:Microsoft.Office.Interop.Word._Document" />
        </returns>
        <remarks>
          <para>This method creates a new document, and it also registers the specified blog account with Word if it is not already registered. In addition, if the
<paramref name="PostID" /> parameter is specified, the new document is populated with the contents of the post specified by the value of the <paramref name="PostID" /> parameter, from the provider's Web site.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOld">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Document AddOld (ref object Template, ref object NewTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Word.Document AddOld([in]object&amp; Template, [in]object&amp; NewTemplate) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.AddOld(System.Object@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOld (Optional ByRef Template As Object, Optional ByRef NewTemplate As Object) As Document" />
      <MemberSignature Language="F#" Value="abstract member AddOld : obj * obj -&gt; Microsoft.Office.Interop.Word.Document" Usage="documents.AddOld (Template, NewTemplate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Document</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Template" Type="System.Object" RefType="ref" />
        <Parameter Name="NewTemplate" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Template">To be added.</param>
        <param name="NewTemplate">To be added.</param>
        <summary>Reserved for internal use.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Word.Documents.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Word::Application ^ Application { Microsoft::Office::Interop::Word::Application ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Application : Microsoft.Office.Interop.Word.Application" Usage="Microsoft.Office.Interop.Word.Documents.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1000)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1000)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a <see cref="T:Microsoft.Office.Interop.Word.Application" /> object that represents the Microsoft Word application</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCheckOut">
      <MemberSignature Language="C#" Value="public bool CanCheckOut (string FileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCheckOut([in]string FileName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.CanCheckOut(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanCheckOut (FileName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanCheckOut(System::String ^ FileName);" />
      <MemberSignature Language="F#" Value="abstract member CanCheckOut : string -&gt; bool" Usage="documents.CanCheckOut FileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(17)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="FileName">Required <b>String</b>. The server path and name of the document.</param>
        <summary>Determines if Microsoft Word can check out a specified document from a server. Read/write <b>Boolean</b>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method returns <b>True</b> if Microsoft Word can check out a specified document from a server, and <b>False</b> if not.</para>
          <para>To take advantage of the collaboration features built into Word, documents must be stored on a Microsoft SharePoint Portal Server.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckOut">
      <MemberSignature Language="C#" Value="public void CheckOut (string FileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CheckOut([in]string FileName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.CheckOut(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CheckOut (FileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CheckOut(System::String ^ FileName);" />
      <MemberSignature Language="F#" Value="abstract member CheckOut : string -&gt; unit" Usage="documents.CheckOut FileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="FileName">Required <b>String</b>. The name of the file to check out.</param>
        <summary>Copies a specified document from a server to a local computer for editing.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (ref object SaveChanges, ref object OriginalFormat, ref object RouteDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close([in]object&amp; SaveChanges, [in]object&amp; OriginalFormat, [in]object&amp; RouteDocument) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.Close(System.Object@,System.Object@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (Optional ByRef SaveChanges As Object, Optional ByRef OriginalFormat As Object, Optional ByRef RouteDocument As Object)" />
      <MemberSignature Language="F#" Value="abstract member Close : obj * obj * obj -&gt; unit" Usage="documents.Close (SaveChanges, OriginalFormat, RouteDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1105)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SaveChanges" Type="System.Object" RefType="ref" />
        <Parameter Name="OriginalFormat" Type="System.Object" RefType="ref" />
        <Parameter Name="RouteDocument" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="SaveChanges">Optional <b>Object</b>. Specifies the save action for the document. Can be one of the following <see cref="T:Microsoft.Office.Interop.Word.WdSaveOptions" /> constants: <b>wdDoNotSaveChanges</b>, <b>wdPromptToSaveChanges</b>, or <b>wdSaveChanges</b>.</param>
        <param name="OriginalFormat">Optional <b>Object</b>. Specifies the save format for the document. Can be one of the following <see cref="T:Microsoft.Office.Interop.Word.WdOriginalFormat" /> constants: <b>wdOriginalDocumentFormat</b>, <b>wdPromptUser</b>, or <b>wdWordDocument</b>.</param>
        <param name="RouteDocument">Optional <b>Object</b>. <b>True</b> to route the document to the next recipient. If the document doesn't have a routing slip attached, this argument is ignored.</param>
        <summary>Closes the specified document or documents.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Word.Documents.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.Office.Interop.Word.Documents.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of items in the specified collection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public int Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Word.Documents.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Creator { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Creator : int" Usage="Microsoft.Office.Interop.Word.Documents.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1001)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1001)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a 32-bit integer that indicates the application in which the specified object was created.</summary>
        <value>To be added.</value>
        <remarks>
          <para>If the specified object was created in Microsoft Word, this property returns the hexadecimal number 4D535744, which represents the string "MSWD." This value can also be represented by the constant <b>wdCreatorCode</b>.</para>
          <para>The <b>Creator</b> property was primarily designed to be used on the Macintosh, where each application has a four-character creator code. For example, Microsoft Word has the creator code MSWD. For additional information about this property, consult the language reference Help included with Microsoft Office Macintosh Edition.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="documents.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Document this[ref object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.Document Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Word.Documents.Item(System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(ByRef Index As Object) As Document" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Word::Document ^ default[System::Object ^ %] { Microsoft::Office::Interop::Word::Document ^ get(System::Object ^ % Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : Microsoft.Office.Interop.Word.Document" Usage="Microsoft.Office.Interop.Word.Documents.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Document</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Index">An <b>Object</b> indicating the ordinal position or a string representing the name of the individual object.</param>
        <summary>Returns an individual object in a collection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Document Open (ref object FileName, ref object ConfirmConversions, ref object ReadOnly, ref object AddToRecentFiles, ref object PasswordDocument, ref object PasswordTemplate, ref object Revert, ref object WritePasswordDocument, ref object WritePasswordTemplate, ref object Format, ref object Encoding, ref object Visible, ref object OpenAndRepair, ref object DocumentDirection, ref object NoEncodingDialog, ref object XMLTransform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Word.Document Open([in]object&amp; FileName, [in]object&amp; ConfirmConversions, [in]object&amp; ReadOnly, [in]object&amp; AddToRecentFiles, [in]object&amp; PasswordDocument, [in]object&amp; PasswordTemplate, [in]object&amp; Revert, [in]object&amp; WritePasswordDocument, [in]object&amp; WritePasswordTemplate, [in]object&amp; Format, [in]object&amp; Encoding, [in]object&amp; Visible, [in]object&amp; OpenAndRepair, [in]object&amp; DocumentDirection, [in]object&amp; NoEncodingDialog, [in]object&amp; XMLTransform) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.Open(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (ByRef FileName As Object, Optional ByRef ConfirmConversions As Object, Optional ByRef ReadOnly As Object, Optional ByRef AddToRecentFiles As Object, Optional ByRef PasswordDocument As Object, Optional ByRef PasswordTemplate As Object, Optional ByRef Revert As Object, Optional ByRef WritePasswordDocument As Object, Optional ByRef WritePasswordTemplate As Object, Optional ByRef Format As Object, Optional ByRef Encoding As Object, Optional ByRef Visible As Object, Optional ByRef OpenAndRepair As Object, Optional ByRef DocumentDirection As Object, Optional ByRef NoEncodingDialog As Object, Optional ByRef XMLTransform As Object) As Document" />
      <MemberSignature Language="F#" Value="abstract member Open : obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj -&gt; Microsoft.Office.Interop.Word.Document" Usage="documents.Open (FileName, ConfirmConversions, ReadOnly, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, Format, Encoding, Visible, OpenAndRepair, DocumentDirection, NoEncodingDialog, XMLTransform)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(19)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Document</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileName" Type="System.Object" RefType="ref" />
        <Parameter Name="ConfirmConversions" Type="System.Object" RefType="ref" />
        <Parameter Name="ReadOnly" Type="System.Object" RefType="ref" />
        <Parameter Name="AddToRecentFiles" Type="System.Object" RefType="ref" />
        <Parameter Name="PasswordDocument" Type="System.Object" RefType="ref" />
        <Parameter Name="PasswordTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="Revert" Type="System.Object" RefType="ref" />
        <Parameter Name="WritePasswordDocument" Type="System.Object" RefType="ref" />
        <Parameter Name="WritePasswordTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="Format" Type="System.Object" RefType="ref" />
        <Parameter Name="Encoding" Type="System.Object" RefType="ref" />
        <Parameter Name="Visible" Type="System.Object" RefType="ref" />
        <Parameter Name="OpenAndRepair" Type="System.Object" RefType="ref" />
        <Parameter Name="DocumentDirection" Type="System.Object" RefType="ref" />
        <Parameter Name="NoEncodingDialog" Type="System.Object" RefType="ref" />
        <Parameter Name="XMLTransform" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileName">Required <b>Object</b>. The name of the document (paths are accepted).</param>
        <param name="ConfirmConversions">Optional <b>Object</b>. <b>True</b> to display the Convert File dialog box if the file isn't in Microsoft Word format.</param>
        <param name="ReadOnly">Optional <b>Object</b>. <b>True</b> to open the document as read-only.<b>Note</b>   This argument doesn't override the read-only recommended setting on a saved document. For example, if a document has been saved with read-only recommended turned on, setting the <b>ReadOnly</b> argument to <b>False</b> will not cause the file to be opened as read/write.</param>
        <param name="AddToRecentFiles">Optional <b>Object</b>. <b>True</b> to add the file name to the list of recently used files at the bottom of the File menu.</param>
        <param name="PasswordDocument">Optional <b>Object</b>. The password for opening the document.</param>
        <param name="PasswordTemplate">Optional <b>Object</b>. The password for opening the template.</param>
        <param name="Revert">Optional <b>Object</b>. Controls what happens if <paramref name="FileName" /> is the name of an open document. <b>True</b> to discard any unsaved changes to the open document and reopen the file. <b>False</b> to activate the open document.</param>
        <param name="WritePasswordDocument">Optional <b>Object</b>. The password for saving changes to the document.</param>
        <param name="WritePasswordTemplate">Optional <b>Object</b>. The password for saving changes to the template.</param>
        <param name="Format">Optional <b>Object</b>. The file converter to be used to open the document. Can be a <see cref="T:Microsoft.Office.Interop.Word.WdOpenFormat" /> constant.To specify an external file format, apply the <see cref="P:Microsoft.Office.Interop.Word.FileConverter.OpenFormat" /> property to a <see cref="T:Microsoft.Office.Interop.Word.FileConverter" /> object to determine the value to use with this argument.</param>
        <param name="Encoding">Optional <b>Object</b>. The document encoding (code page or character set) to be used by Microsoft Word when you view the saved document. Can be any valid <see cref="T:Microsoft.Office.Core.MsoEncoding" /> constant. The default value is the system code page.</param>
        <param name="Visible">Optional <b>Object</b>. <b>True</b> if the document is opened in a visible window. The default value is <b>True</b>.</param>
        <param name="OpenAndRepair">Optional <b>Object</b>. <b>True</b> to repair the document to prevent document corruption.</param>
        <param name="DocumentDirection">Optional <b>Object. </b>Can be a <see cref="T:Microsoft.Office.Interop.Word.WdDocumentDirection" /> constant.</param>
        <param name="NoEncodingDialog">Optional <b>Object</b>. <b>True</b> to skip displaying the Encoding dialog box that Word displays if the text encoding cannot be recognized. The default value is <b>False</b>.</param>
        <param name="XMLTransform">Optional <b>Object</b>. Specifies a transform to use.</param>
        <summary>Opens the specified document and adds it to the <see cref="T:Microsoft.Office.Interop.Word.Documents" /> collection. </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Avoid using hard-coded passwords in your applications. If a password is required in a procedure, request the password from the user, store it in a variable, and then use the variable in your code.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open2000">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Document Open2000 (ref object FileName, ref object ConfirmConversions, ref object ReadOnly, ref object AddToRecentFiles, ref object PasswordDocument, ref object PasswordTemplate, ref object Revert, ref object WritePasswordDocument, ref object WritePasswordTemplate, ref object Format, ref object Encoding, ref object Visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Word.Document Open2000([in]object&amp; FileName, [in]object&amp; ConfirmConversions, [in]object&amp; ReadOnly, [in]object&amp; AddToRecentFiles, [in]object&amp; PasswordDocument, [in]object&amp; PasswordTemplate, [in]object&amp; Revert, [in]object&amp; WritePasswordDocument, [in]object&amp; WritePasswordTemplate, [in]object&amp; Format, [in]object&amp; Encoding, [in]object&amp; Visible) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.Open2000(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open2000 (ByRef FileName As Object, Optional ByRef ConfirmConversions As Object, Optional ByRef ReadOnly As Object, Optional ByRef AddToRecentFiles As Object, Optional ByRef PasswordDocument As Object, Optional ByRef PasswordTemplate As Object, Optional ByRef Revert As Object, Optional ByRef WritePasswordDocument As Object, Optional ByRef WritePasswordTemplate As Object, Optional ByRef Format As Object, Optional ByRef Encoding As Object, Optional ByRef Visible As Object) As Document" />
      <MemberSignature Language="F#" Value="abstract member Open2000 : obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj -&gt; Microsoft.Office.Interop.Word.Document" Usage="documents.Open2000 (FileName, ConfirmConversions, ReadOnly, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, Format, Encoding, Visible)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(15)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Document</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileName" Type="System.Object" RefType="ref" />
        <Parameter Name="ConfirmConversions" Type="System.Object" RefType="ref" />
        <Parameter Name="ReadOnly" Type="System.Object" RefType="ref" />
        <Parameter Name="AddToRecentFiles" Type="System.Object" RefType="ref" />
        <Parameter Name="PasswordDocument" Type="System.Object" RefType="ref" />
        <Parameter Name="PasswordTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="Revert" Type="System.Object" RefType="ref" />
        <Parameter Name="WritePasswordDocument" Type="System.Object" RefType="ref" />
        <Parameter Name="WritePasswordTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="Format" Type="System.Object" RefType="ref" />
        <Parameter Name="Encoding" Type="System.Object" RefType="ref" />
        <Parameter Name="Visible" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileName">To be added.</param>
        <param name="ConfirmConversions">To be added.</param>
        <param name="ReadOnly">To be added.</param>
        <param name="AddToRecentFiles">To be added.</param>
        <param name="PasswordDocument">To be added.</param>
        <param name="PasswordTemplate">To be added.</param>
        <param name="Revert">To be added.</param>
        <param name="WritePasswordDocument">To be added.</param>
        <param name="WritePasswordTemplate">To be added.</param>
        <param name="Format">To be added.</param>
        <param name="Encoding">To be added.</param>
        <param name="Visible">To be added.</param>
        <summary>Reserved for internal use.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open2002">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Document Open2002 (ref object FileName, ref object ConfirmConversions, ref object ReadOnly, ref object AddToRecentFiles, ref object PasswordDocument, ref object PasswordTemplate, ref object Revert, ref object WritePasswordDocument, ref object WritePasswordTemplate, ref object Format, ref object Encoding, ref object Visible, ref object OpenAndRepair, ref object DocumentDirection, ref object NoEncodingDialog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Word.Document Open2002([in]object&amp; FileName, [in]object&amp; ConfirmConversions, [in]object&amp; ReadOnly, [in]object&amp; AddToRecentFiles, [in]object&amp; PasswordDocument, [in]object&amp; PasswordTemplate, [in]object&amp; Revert, [in]object&amp; WritePasswordDocument, [in]object&amp; WritePasswordTemplate, [in]object&amp; Format, [in]object&amp; Encoding, [in]object&amp; Visible, [in]object&amp; OpenAndRepair, [in]object&amp; DocumentDirection, [in]object&amp; NoEncodingDialog) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.Open2002(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open2002 (ByRef FileName As Object, Optional ByRef ConfirmConversions As Object, Optional ByRef ReadOnly As Object, Optional ByRef AddToRecentFiles As Object, Optional ByRef PasswordDocument As Object, Optional ByRef PasswordTemplate As Object, Optional ByRef Revert As Object, Optional ByRef WritePasswordDocument As Object, Optional ByRef WritePasswordTemplate As Object, Optional ByRef Format As Object, Optional ByRef Encoding As Object, Optional ByRef Visible As Object, Optional ByRef OpenAndRepair As Object, Optional ByRef DocumentDirection As Object, Optional ByRef NoEncodingDialog As Object) As Document" />
      <MemberSignature Language="F#" Value="abstract member Open2002 : obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj -&gt; Microsoft.Office.Interop.Word.Document" Usage="documents.Open2002 (FileName, ConfirmConversions, ReadOnly, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, Format, Encoding, Visible, OpenAndRepair, DocumentDirection, NoEncodingDialog)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(18)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Document</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileName" Type="System.Object" RefType="ref" />
        <Parameter Name="ConfirmConversions" Type="System.Object" RefType="ref" />
        <Parameter Name="ReadOnly" Type="System.Object" RefType="ref" />
        <Parameter Name="AddToRecentFiles" Type="System.Object" RefType="ref" />
        <Parameter Name="PasswordDocument" Type="System.Object" RefType="ref" />
        <Parameter Name="PasswordTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="Revert" Type="System.Object" RefType="ref" />
        <Parameter Name="WritePasswordDocument" Type="System.Object" RefType="ref" />
        <Parameter Name="WritePasswordTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="Format" Type="System.Object" RefType="ref" />
        <Parameter Name="Encoding" Type="System.Object" RefType="ref" />
        <Parameter Name="Visible" Type="System.Object" RefType="ref" />
        <Parameter Name="OpenAndRepair" Type="System.Object" RefType="ref" />
        <Parameter Name="DocumentDirection" Type="System.Object" RefType="ref" />
        <Parameter Name="NoEncodingDialog" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileName">To be added.</param>
        <param name="ConfirmConversions">To be added.</param>
        <param name="ReadOnly">To be added.</param>
        <param name="AddToRecentFiles">To be added.</param>
        <param name="PasswordDocument">To be added.</param>
        <param name="PasswordTemplate">To be added.</param>
        <param name="Revert">To be added.</param>
        <param name="WritePasswordDocument">To be added.</param>
        <param name="WritePasswordTemplate">To be added.</param>
        <param name="Format">To be added.</param>
        <param name="Encoding">To be added.</param>
        <param name="Visible">To be added.</param>
        <param name="OpenAndRepair">To be added.</param>
        <param name="DocumentDirection">To be added.</param>
        <param name="NoEncodingDialog">To be added.</param>
        <summary>Reserved for internal use.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNoRepairDialog">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Document OpenNoRepairDialog (ref object FileName, ref object ConfirmConversions, ref object ReadOnly, ref object AddToRecentFiles, ref object PasswordDocument, ref object PasswordTemplate, ref object Revert, ref object WritePasswordDocument, ref object WritePasswordTemplate, ref object Format, ref object Encoding, ref object Visible, ref object OpenAndRepair, ref object DocumentDirection, ref object NoEncodingDialog, ref object XMLTransform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Word.Document OpenNoRepairDialog([in]object&amp; FileName, [in]object&amp; ConfirmConversions, [in]object&amp; ReadOnly, [in]object&amp; AddToRecentFiles, [in]object&amp; PasswordDocument, [in]object&amp; PasswordTemplate, [in]object&amp; Revert, [in]object&amp; WritePasswordDocument, [in]object&amp; WritePasswordTemplate, [in]object&amp; Format, [in]object&amp; Encoding, [in]object&amp; Visible, [in]object&amp; OpenAndRepair, [in]object&amp; DocumentDirection, [in]object&amp; NoEncodingDialog, [in]object&amp; XMLTransform) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.OpenNoRepairDialog(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNoRepairDialog (ByRef FileName As Object, Optional ByRef ConfirmConversions As Object, Optional ByRef ReadOnly As Object, Optional ByRef AddToRecentFiles As Object, Optional ByRef PasswordDocument As Object, Optional ByRef PasswordTemplate As Object, Optional ByRef Revert As Object, Optional ByRef WritePasswordDocument As Object, Optional ByRef WritePasswordTemplate As Object, Optional ByRef Format As Object, Optional ByRef Encoding As Object, Optional ByRef Visible As Object, Optional ByRef OpenAndRepair As Object, Optional ByRef DocumentDirection As Object, Optional ByRef NoEncodingDialog As Object, Optional ByRef XMLTransform As Object) As Document" />
      <MemberSignature Language="F#" Value="abstract member OpenNoRepairDialog : obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj * obj -&gt; Microsoft.Office.Interop.Word.Document" Usage="documents.OpenNoRepairDialog (FileName, ConfirmConversions, ReadOnly, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, Format, Encoding, Visible, OpenAndRepair, DocumentDirection, NoEncodingDialog, XMLTransform)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(20)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Document</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileName" Type="System.Object" RefType="ref" />
        <Parameter Name="ConfirmConversions" Type="System.Object" RefType="ref" />
        <Parameter Name="ReadOnly" Type="System.Object" RefType="ref" />
        <Parameter Name="AddToRecentFiles" Type="System.Object" RefType="ref" />
        <Parameter Name="PasswordDocument" Type="System.Object" RefType="ref" />
        <Parameter Name="PasswordTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="Revert" Type="System.Object" RefType="ref" />
        <Parameter Name="WritePasswordDocument" Type="System.Object" RefType="ref" />
        <Parameter Name="WritePasswordTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="Format" Type="System.Object" RefType="ref" />
        <Parameter Name="Encoding" Type="System.Object" RefType="ref" />
        <Parameter Name="Visible" Type="System.Object" RefType="ref" />
        <Parameter Name="OpenAndRepair" Type="System.Object" RefType="ref" />
        <Parameter Name="DocumentDirection" Type="System.Object" RefType="ref" />
        <Parameter Name="NoEncodingDialog" Type="System.Object" RefType="ref" />
        <Parameter Name="XMLTransform" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileName">The name of the document (paths are accepted).</param>
        <param name="ConfirmConversions">
          <b>True</b> to display the Convert File dialog box if the file isn't in Microsoft Word format.</param>
        <param name="ReadOnly">
          <b>True</b> to open the document as read-only. This argument doesn't override the read-only recommended setting on a saved document. For example, if a document has been saved with read-only recommended turned on, setting the <paramref name="ReadOnly" /> argument to <b>False</b> will not cause the file to be opened as read/write.</param>
        <param name="AddToRecentFiles">
          <b>True</b> to add the file name to the list of recently used files at the bottom of the File menu.</param>
        <param name="PasswordDocument">The password for opening the document.</param>
        <param name="PasswordTemplate">The password for opening the template.</param>
        <param name="Revert">Controls what happens if <paramref name="FileName" /> is the name of an open document. <b>True</b> to discard any unsaved changes to the open document and reopen the file. <b>False</b> to activate the open document.</param>
        <param name="WritePasswordDocument">The password for saving changes to the document.</param>
        <param name="WritePasswordTemplate">The password for saving changes to the template.</param>
        <param name="Format">The file converter to be used to open the document. Can be one of the <see cref="T:Microsoft.Office.Interop.Word.WdOpenFormat" /> constants. The default value is <see cref="F:Microsoft.Office.Interop.Word.WdOpenFormat.wdOpenFormatAuto" />.</param>
        <param name="Encoding">The document encoding (code page or character set) to be used by Microsoft Word when you view the saved document. Can be any valid <see cref="T:Microsoft.Office.Core.MsoEncoding" /> enumeration value. The default value is the system code page.</param>
        <param name="Visible">
          <b>True</b> if the document is opened in a visible window. The default value is <b>True</b>.</param>
        <param name="OpenAndRepair">
          <b>True</b> to repair the document to prevent document corruption.</param>
        <param name="DocumentDirection">Indicates the horizontal flow of text in a document. Can be any valid <see cref="T:Microsoft.Office.Interop.Word.WdDocumentDirection" /> constant. The default value is <see cref="F:Microsoft.Office.Interop.Word.WdDocumentDirection.wdLeftToRight" />.</param>
        <param name="NoEncodingDialog">
          <b>True</b> to skip displaying the Encoding dialog box that Word displays if the text encoding cannot be recognized. The default value is <b>False</b>.</param>
        <param name="XMLTransform">Specifies a transform to use.</param>
        <summary>Opens the specified document and adds it to the <see cref="T:Microsoft.Office.Interop.Word.Documents" /> collection.</summary>
        <returns>
          <see cref="T:Microsoft.Office.Interop.Word._Document" />
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenOld">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Document OpenOld (ref object FileName, ref object ConfirmConversions, ref object ReadOnly, ref object AddToRecentFiles, ref object PasswordDocument, ref object PasswordTemplate, ref object Revert, ref object WritePasswordDocument, ref object WritePasswordTemplate, ref object Format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Word.Document OpenOld([in]object&amp; FileName, [in]object&amp; ConfirmConversions, [in]object&amp; ReadOnly, [in]object&amp; AddToRecentFiles, [in]object&amp; PasswordDocument, [in]object&amp; PasswordTemplate, [in]object&amp; Revert, [in]object&amp; WritePasswordDocument, [in]object&amp; WritePasswordTemplate, [in]object&amp; Format) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.OpenOld(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenOld (ByRef FileName As Object, Optional ByRef ConfirmConversions As Object, Optional ByRef ReadOnly As Object, Optional ByRef AddToRecentFiles As Object, Optional ByRef PasswordDocument As Object, Optional ByRef PasswordTemplate As Object, Optional ByRef Revert As Object, Optional ByRef WritePasswordDocument As Object, Optional ByRef WritePasswordTemplate As Object, Optional ByRef Format As Object) As Document" />
      <MemberSignature Language="F#" Value="abstract member OpenOld : obj * obj * obj * obj * obj * obj * obj * obj * obj * obj -&gt; Microsoft.Office.Interop.Word.Document" Usage="documents.OpenOld (FileName, ConfirmConversions, ReadOnly, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, Format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(12)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Document</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileName" Type="System.Object" RefType="ref" />
        <Parameter Name="ConfirmConversions" Type="System.Object" RefType="ref" />
        <Parameter Name="ReadOnly" Type="System.Object" RefType="ref" />
        <Parameter Name="AddToRecentFiles" Type="System.Object" RefType="ref" />
        <Parameter Name="PasswordDocument" Type="System.Object" RefType="ref" />
        <Parameter Name="PasswordTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="Revert" Type="System.Object" RefType="ref" />
        <Parameter Name="WritePasswordDocument" Type="System.Object" RefType="ref" />
        <Parameter Name="WritePasswordTemplate" Type="System.Object" RefType="ref" />
        <Parameter Name="Format" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileName">To be added.</param>
        <param name="ConfirmConversions">To be added.</param>
        <param name="ReadOnly">To be added.</param>
        <param name="AddToRecentFiles">To be added.</param>
        <param name="PasswordDocument">To be added.</param>
        <param name="PasswordTemplate">To be added.</param>
        <param name="Revert">To be added.</param>
        <param name="WritePasswordDocument">To be added.</param>
        <param name="WritePasswordTemplate">To be added.</param>
        <param name="Format">To be added.</param>
        <summary>Reserved for internal use.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Word.Documents.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : obj" Usage="Microsoft.Office.Interop.Word.Documents.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1002)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1002)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an object that represents the parent object of the specified object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (ref object NoPrompt, ref object OriginalFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save([in]object&amp; NoPrompt, [in]object&amp; OriginalFormat) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Word.Documents.Save(System.Object@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (Optional ByRef NoPrompt As Object, Optional ByRef OriginalFormat As Object)" />
      <MemberSignature Language="F#" Value="abstract member Save : obj * obj -&gt; unit" Usage="documents.Save (NoPrompt, OriginalFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(13)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NoPrompt" Type="System.Object" RefType="ref" />
        <Parameter Name="OriginalFormat" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="NoPrompt">Optional <b>Object</b>. <b>True</b> to have Microsoft Word automatically save all documents; <b>False</b> to have Word prompt the user to save each document that has changed since it was last saved.</param>
        <param name="OriginalFormat">Optional <b>Object</b>. Specifies the way the documents are saved. Can be one of the <see cref="T:Microsoft.Office.Interop.Word.WdOriginalFormat" />constants.</param>
        <summary>Saves all the documents in the <see cref="P:Microsoft.Office.Interop.Word._Application.Documents" /> collection.</summary>
        <remarks>
          <para>If a document hasn't been saved before, the Save As dialog box prompts the user for a file name.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
