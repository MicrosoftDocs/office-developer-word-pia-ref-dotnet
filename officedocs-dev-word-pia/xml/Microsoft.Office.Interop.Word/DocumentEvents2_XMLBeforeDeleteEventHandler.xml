<Type Name="DocumentEvents2_XMLBeforeDeleteEventHandler" FullName="Microsoft.Office.Interop.Word.DocumentEvents2_XMLBeforeDeleteEventHandler">
  <TypeSignature Language="C#" Value="public delegate void DocumentEvents2_XMLBeforeDeleteEventHandler(Range DeletedRange, XMLNode OldXMLNode, bool InUndoRedo);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DocumentEvents2_XMLBeforeDeleteEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Word.DocumentEvents2_XMLBeforeDeleteEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub DocumentEvents2_XMLBeforeDeleteEventHandler(DeletedRange As Range, OldXMLNode As XMLNode, InUndoRedo As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void DocumentEvents2_XMLBeforeDeleteEventHandler(Range ^ DeletedRange, XMLNode ^ OldXMLNode, bool InUndoRedo);" />
  <TypeSignature Language="F#" Value="type DocumentEvents2_XMLBeforeDeleteEventHandler = delegate of Range * XMLNode * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Word</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(16)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="DeletedRange" Type="Microsoft.Office.Interop.Word.Range" />
    <Parameter Name="OldXMLNode" Type="Microsoft.Office.Interop.Word.XMLNode" />
    <Parameter Name="InUndoRedo" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="DeletedRange">
      <see cref="T:Microsoft.Office.Interop.Word.Range" /> object. The contents of the XML element being deleted. If only an element is deleted and not associated text, the <paramref name="DeletedRange" /> parameter will not exist and will, therefore, be set to <b>Nothing</b>.</param>
    <param name="OldXMLNode">
      <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> object. The node that is being deleted.</param>
    <param name="InUndoRedo">
      <b>Boolean</b>. <b>True</b> indicates the action was performed using the <b>Undo</b> or <b>Redo</b> feature in Microsoft Word.</param>
    <summary>A <b>Delegate</b> type used to add an event handler for the <see cref="E:Microsoft.Office.Interop.Word.DocumentEvents2_Event.XMLBeforeDelete" /> event. The <b>XMLBeforeDelete</b> event occurs when a user deletes an XML element from a document.</summary>
    <remarks>
      <para>If the <paramref name="InUndoRedo" /> parameter is <b>True</b>, never change the XML in a document while the <see cref="E:Microsoft.Office.Interop.Word.DocumentEvents2_Event.XMLAfterInsert" /> and <b>XMLBeforeDelete</b> events are running. </para>
      <para>If the <paramref name="InUndoRedo" /> parameter is <b>False</b>, you can insert and delete the XML in the document— but be careful that the <b>XMLAfterInsert</b> and <b>XMLBeforeDelete</b> events will not try to cancel each other out, causing an infinite loop. You can prevent infinite loops by using a global <b>Boolean</b> variable and check for that at the beginning of the error handler.</para>
      <para />
    </remarks>
  </Docs>
</Type>
